version: '3.8'

services:
  # PostgreSQL Database (Shared by all services)
  database:
    image: postgres:15-alpine
    container_name: vacation-db
    env_file: ./production.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vacation_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - vacation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Django Vacation Website (Main Website)
  django-website:
    build: 
      context: ./Vacation_Website
      dockerfile: Dockerfile.prod
    container_name: django-vacation-website
    env_file: ./production.env
    environment:
      DB_NAME: ${POSTGRES_DB:-vacation_db}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: database
      DB_PORT: 5432
      DEBUG: ${DJANGO_DEBUG:-False}
      SECRET_KEY: ${DJANGO_SECRET_KEY}
      ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      STATIC_URL: ${STATIC_URL:-/static/}
      MEDIA_URL: ${MEDIA_URL:-/media/}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - vacation-network
    restart: unless-stopped

  # Flask Backend API
  backend-api:
    build: 
      context: ./Vacation_Statistics_Website/backend
      dockerfile: Dockerfile.prod
    container_name: flask-backend-api
    env_file: ./production.env
    environment:
      DB_NAME: ${POSTGRES_DB:-vacation_db}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: database
      DB_PORT: 5432
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      FLASK_ENV: ${FLASK_ENV:-production}
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports:
      - "5001:5001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - vacation-network
    restart: unless-stopped

  # React Frontend
  frontend:
    build: 
      context: ./Vacation_Statistics_Website/frontend
      dockerfile: Dockerfile.prod
    container_name: react-frontend
    env_file: ./production.env
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_DJANGO_URL: ${REACT_APP_DJANGO_URL}
    ports:
      - "3000:80"
    depends_on:
      - backend-api
      - django-website
    networks:
      - vacation-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - django-website
      - backend-api
      - frontend
    networks:
      - vacation-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  nginx_logs:
    driver: local

networks:
  vacation-network:
    driver: bridge

